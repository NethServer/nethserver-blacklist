#!/usr/bin/python

#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import fileinput
import simplejson
import re
import os


def invalid_attribute(parameter, error):
    return {"parameter": parameter, "error": error, "value": ""}


def validate_ip(input_json):
    invalid_attributes = []

    ip_address_p = 'ipAddress'

    if (ip_address_p not in input_json) or (not input_json[ip_address_p]):
        invalid_attributes.append(invalid_attribute(ip_address_p, "empty"))
    else:
        ip_address = input_json[ip_address_p]

        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}$", ip_address):
            invalid_attributes.append(
                invalid_attribute(ip_address_p, "invalid"))

    # output
    success = len(invalid_attributes) == 0

    if success:
        output = {"state": "success"}
    else:
        output = {"type": "NotValid", "message": "validation_failed",
                  "attributes": invalid_attributes}

    return output


def validate_domain(input_json):
    invalid_attributes = []

    if 'domain' in input_json:
        domain_p = 'domain'
    elif 'ipOrDomain' in input_json:
        domain_p = 'ipOrDomain'

    if not input_json[domain_p]:
        invalid_attributes.append(invalid_attribute(domain_p, "empty"))
    else:
        domain = input_json[domain_p]

        if not re.match(r"^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$", domain):
            invalid_attributes.append(
                invalid_attribute(domain_p, "invalid"))

    # output
    success = len(invalid_attributes) == 0

    if success:
        output = {"state": "success"}
    else:
        output = {"type": "NotValid", "message": "validation_failed",
                  "attributes": invalid_attributes}

    return output


def validate_ip_or_domain(input_json):
    # try IP validation
    input_json['ipAddress'] = input_json['ipOrDomain']
    validation_result = validate_ip(input_json)

    if ('state' in validation_result) and (validation_result['state'] == 'success'):
        # IP validated
        validation_result['ipOrDomain'] = 'ip'
    else:
        # try domain validation
        validation_result = validate_domain(input_json)

        if ('state' in validation_result) and (validation_result['state'] == 'success'):
            # domain validated
            validation_result['ipOrDomain'] = 'domain'

    return validation_result


try:
    line = fileinput.input()[0].rstrip()
    input_json = simplejson.loads(line)
    action = input_json["action"]

    if action == 'search':
        if 'ipAddress' in input_json:
            validation_result = validate_ip(input_json)
        elif 'domain' in input_json:
            validation_result = validate_domain(input_json)
        elif 'ipOrDomain' in input_json:
            validation_result = validate_ip_or_domain(input_json)
        else:
            raise ValueError("invalid input")

        output = simplejson.dumps(validation_result)
        print(output)

        if ('state' not in validation_result) or (validation_result['state'] != 'success'):
            sys.exit(1)
    else:
        raise ValueError("invalid action: {}".format(action))
except Exception as e:
    print simplejson.dumps({'error': "%s" % e})
    sys.exit(1)
